[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cody Iordachescu",
    "section": "",
    "text": "Email\n  \n  \n    \n     GitHub\n  \n  \n    \n     Resume\n  \n\n  \n  \n\n\n\nCubaris Murina"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hobbies.html#terraria",
    "href": "Hobbies.html#terraria",
    "title": "Hobbies",
    "section": "Terraria",
    "text": "Terraria"
  },
  {
    "objectID": "Hobbies.html#fitness",
    "href": "Hobbies.html#fitness",
    "title": "Hobbies",
    "section": "Fitness",
    "text": "Fitness\n\nHiking\nCamping\nWeights\nNutrition"
  },
  {
    "objectID": "index.html#bugs-are-pretty-fun.-here-are-a-few-of-mine",
    "href": "index.html#bugs-are-pretty-fun.-here-are-a-few-of-mine",
    "title": "Cody Iordachescu",
    "section": "",
    "text": "Cubaris Murina"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Cody Iordachescu",
    "section": "About Me",
    "text": "About Me\nHi there! I’m Cody Iordachescu, a data enthusiast with a passion for leveraging insights to drive positive change. With a background in biology and bioinformatics, I bring a unique perspective to the world of data analysis. I’m fascinated by the intersection of science, technology, and creativity, and I thrive on solving complex problems and turning data into actionable insights."
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Cody Iordachescu",
    "section": "Skills & Expertise",
    "text": "Skills & Expertise\n\nData Analysis: Experienced in Python, R, and SQL, with an ablility to relay meaningful patterns and trends in data.\nBusiness Intelligence: Skilled in developing interactive dashboards and reports using tools like Power BI, empowering decision-makers with real-time insights.\nNetSuite Administration: Proficient in designing and implementing role-specific dashboards and reports in NetSuite, streamlining workflow processes.\nCommunication: Excellent communicator with experience distilling complex technical requirements into clear, actionable next steps.\nContinuous Learning: Committed to staying up-to-date with the latest developments in data science and technology, always eager to expand my skill set."
  },
  {
    "objectID": "index.html#interests",
    "href": "index.html#interests",
    "title": "Cody Iordachescu",
    "section": "Interests & Hobbies",
    "text": "Interests & Hobbies\n\nOutside of the data world, you’ll often find me exploring the great outdoors, whether it’s hiking through scenic trails or setting up terrariums to bring a little piece of nature indoors. I’m also a fitness enthusiast, passionate about staying active and maintaining a healthy lifestyle. When I’m not analyzing data or hitting the gym, I enjoy experimenting with new recipes in the kitchen and immersing myself in Japanese culture through language and cuisine."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Cody Iordachescu",
    "section": "Get in Touch",
    "text": "Get in Touch\n\nFeel free to reach out to me via my links above. I’m always open to new opportunities, collaborations, or just a friendly chat!"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Cody Iordachescu",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "Skills.html",
    "href": "Skills.html",
    "title": "Portfolio",
    "section": "",
    "text": "Proficient in Power BI development with 2 years of experience.\nSkilled in creating interactive dashboards, reports, and data visualizations to facilitate data-driven decision-making. :::{.image-row}    :::\n\n\n\n\n\nExperienced Python programmer with 2 years of hands-on experience.\nCapable of creating ETL pipelines, automating tasks, and performing data analysis using Python.\n\n\n\n\n\nProficient in R programming language with 4 years of experience.\nSkilled in data transformation, visualization, modeling and documentation using R.\n\n\n\n\n\nExperienced in SQL with 3 years of practical experience.\nCompetent in writing complex queries, database management, and data manipulation using SQL.\n\nHere is an anonymized sample of a query I wrote to aid operations in complying with their SLA standards via a Power BI report I developed:\nSELECT DISTINCT\n    C.Id AS Id,\n    C.CompanyName AS CompanyName,\n    C.ApiId AS ApiId,\n    C.RepId AS RepId,\n    C.RepName AS RepName,\n    C.Status AS Status,\n    C.Sequence AS Sequence,\n    C.StatusDate AS StatusDate,\n    C.StatusChangeDate AS StatusChangeDate,\n    C.StatusNotes AS StatusNotes,\n    C.Is_Latest_Status AS Is_Latest_Status,\n    C.StatusChangeDate AS StatusChangeDate,\n    C.WithinOneDay AS WithinOneDay,\n    C.SameDayTime AS SameDayTime,\n    C.FirstDayTimeIfNotSameDay AS FirstDayTimeIfNotSameDay,\n    C.LastDayTimeIfNotSameDay AS LastDayTimeIfNotSameDay,\n    C.Betweenhours AS Betweenhours,\n    C.current_datetime AS current_datetime,\n    C.WorkingHours AS WorkingHours,\n    C.SLA_Achieved AS SLA_Achieved,\n    SUM(Is_Within_Date) OVER(\n        PARTITION BY C.ApiId, C.Status\n    ) AS CallCount,\n    Datediff(HOUR, C.StatusDate, C.StatusChangeDate) AS Hours_since_status,\n    CASE\n        WHEN NSO.SlaCadence = 2 THEN 'No'\n        WHEN NSO.SlaCadence = 1 THEN 'Yes'\n        ELSE 'N/A'\n    END AS SLA_Cadence,\n    CASE\n        WHEN NSO.ERCStatus = 1 THEN 'Waiting on Documents'\n        WHEN NSO.ERCStatus = 2 THEN 'Documents Received'\n        WHEN NSO.ERCStatus = 3 THEN 'WOD - Tier 1'\n        WHEN NSO.ERCStatus = 4 THEN 'Full Documents Received'\n        WHEN NSO.ERCStatus = 5 THEN 'Calculating - Tier 1'\n        WHEN NSO.ERCStatus = 6 THEN 'Calculating - Tier 2'\n        WHEN NSO.ERCStatus = 7 THEN 'WOD - Tier 2'\n        WHEN NSO.ERCStatus = 8 THEN 'Ready for Review - Tier 2'\n        WHEN NSO.ERCStatus = 9 THEN 'Ready for Review - Tier 3'\n        WHEN NSO.ERCStatus = 10 THEN 'Gov. Orders Check'\n        WHEN NSO.ERCStatus = 11 THEN 'Ready for Signature'\n        WHEN NSO.ERCStatus = 12 THEN 'Out for Signature'\n        WHEN NSO.ERCStatus = 13 THEN 'Signed'\n        WHEN NSO.ERCStatus = 14 THEN 'Filed'\n        WHEN NSO.ERCStatus = 15 THEN 'Paid - Upfront'\n        WHEN NSO.ERCStatus = 16 THEN 'Paid - Backend'\n        WHEN NSO.ERCStatus = 17 THEN 'Did Not Qualify'\n        WHEN NSO.ERCStatus = 18 THEN 'No Longer Interested'\n        WHEN NSO.ERCStatus = 19 THEN 'Non Responsive'\n        WHEN NSO.ERCStatus = 20 THEN 'Acct Ref - Don''t contact directly'\n        WHEN NSO.ERCStatus = 21 THEN 'Final Attempt Review'\n        ELSE 'N/A'\n    END AS ERCStatus,\n    CASE\n        WHEN NSO.ERCSubStatus = 1 THEN 'Call 1'\n        WHEN NSO.ERCSubStatus = 2 THEN 'Call 2'\n        WHEN NSO.ERCSubStatus = 3 THEN 'Call 3'\n        WHEN NSO.ERCSubStatus = 4 THEN 'Call 4'\n        WHEN NSO.ERCSubStatus = 5 THEN 'Call 5'\n        WHEN NSO.ERCSubStatus = 6 THEN 'Call 6'\n        WHEN NSO.ERCSubStatus = 7 THEN 'Call 7'\n        WHEN NSO.ERCSubStatus = 8 THEN 'Call Non-Responsive'\n        WHEN NSO.ERCSubStatus = 9 THEN 'Scheduled'\n        WHEN NSO.ERCSubStatus = 10 THEN 'Follow up Call 1'\n        WHEN NSO.ERCSubStatus = 11 THEN 'Follow up Call 2'\n        WHEN NSO.ERCSubStatus = 12 THEN 'Follow up Call 3'\n        WHEN NSO.ERCSubStatus = 13 THEN 'Follow up Call 4'\n        WHEN NSO.ERCSubStatus = 14 THEN 'Follow up Non-Responsive'\n        WHEN NSO.ERCSubStatus = 15 THEN 'Blank'\n        ELSE 'N/A'\n    END AS ERCSubStatus,\n    C.AgentName AS Outreach_Agent\nFROM\n    (SELECT\n        E.*,\n        IIF(E.StatusDate = MAX(E.StatusDate) OVER(\n            PARTITION BY E.ApiId\n        ), 1, 0) AS Is_Latest_Status,\n        IIF(E.Status = 'WOD - Tier 1' AND E.WorkingHours &lt;= 72, 1,\n            IIF(E.Status = 'Documents Received' AND E.WorkingHours &lt;= 2, 1,\n                IIF(E.Status = 'Full Documents Received' AND E.WorkingHours &lt;= 2, 1,\n                    IIF(E.Status = 'Calculating - Tier 1' AND E.WorkingHours &lt;= 24, 1,\n                        IIF(E.Status = 'Calculating - Tier 2' AND E.WorkingHours &lt;= 6, 1,\n                            IIF(E.Status = 'Gov. Orders Check' AND E.WorkingHours &lt;= 72, 1,\n                                IIF(E.Status = 'Ready for Review - Tier 2' AND E.WorkingHours &lt;= 5, 1,\n                                    IIF(E.Status = 'Ready for Review - Tier 3' AND E.WorkingHours &lt;= 5, 1,\n                                        IIF(E.Status = 'Ready For Signature' AND E.WorkingHours &lt;= 5, 1,\n                                            IIF(E.Status LIKE '%Attempt%' AND E.WorkingHours &lt;= 24, 1, 0)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        ) AS SLA_Achieved,\n        IIF(calls.CreatedDate &gt;= E.StatusDate AND calls.CreatedDate &lt;= E.StatusChangeDate, 1, 0) AS Is_Within_Date,\n        Outreach.AgentName AS Outreach_Agent\n    FROM\n        (SELECT\n            D.*,\n            IIF(D.WithinOneDay = 1, D.SameDayTime, (D.FirstDayTimeIfNotSameDay + D.Betweenhours + D.LastDayTimeIfNotSameDay)) AS WorkingHours\n        FROM\n            (SELECT\n                C.*,\n                IIF((DATENAME(WEEKDAY, C.StatusDate) = 'Saturday' AND DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate) &lt; 2), 1,\n                    IIF(CAST(C.StatusDate AS DATE) &lt;&gt; CAST(C.StatusChangeDate AS DATE), 0, 1)) AS WithinOneDay,\n                IIF(DATENAME(WEEKDAY, C.StatusDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &gt; 17, 0,\n                        IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &lt; 8,\n                            IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, StatusChangeDate) / 60.00) - 8 &lt; 0, 0,\n                                (CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, StatusChangeDate) / 60.00) - 8),\n                            (((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) -\n                                (CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, StatusDate) / 60.00)))))\n                ) AS SameDayTime,\n                IIF(DATENAME(WEEKDAY, C.StatusDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &gt; 17, 0,\n                        IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &lt; 8, (17 - 8),\n                            (((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) - 8 - 9) * (-1)))))\n                ) AS FirstDayTimeIfNotSameDay,\n                IIF(DATENAME(WEEKDAY, C.StatusChangeDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) &gt; 17, (17 - 8),\n                        IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) &lt; 8, 0,\n                            (((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) - 8))))) AS LastDayTimeIfNotSameDay,\n                IIF((DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9 &gt; 0,\n                    (DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9 - 9,\n                    (DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9) AS Betweenhours,\n                CONVERT(datetime, SWITCHOFFSET(GETDATE(), DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))) AS current_datetime\n            FROM\n                (SELECT DISTINCT\n                    'https://app.tax.com/#/client/' + cast(B.Id as varchar) AS Id,\n                    B.CompanyName AS CompanyName,\n                    B.ApiId AS ApiId,\n                    B.RepId AS RepId,\n                    B.RepName AS RepName,\n                    B.Status AS Status,\n                    B.[Sequence] AS Sequence,\n                    CONVERT(datetime, SWITCHOFFSET(B.StatusDate, DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))) AS StatusDate,\n                    IIF(LEAD(B.StatusDate) OVER(\n                        PARTITION BY B.ApiId\n                        ORDER BY B.StatusDate\n                    ) IS NULL, CONVERT(datetime, SWITCHOFFSET(GETDATE(), DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))),  LEAD(B.StatusDate) OVER(\n                        PARTITION BY B.ApiId\n                        ORDER BY B.StatusDate\n                    )) AS StatusChangeDate\n                FROM\n                    (SELECT\n                        A.*\n                    FROM\n                        (SELECT\n                            ISNULL(co.Id, 0) AS Id,\n                            co.Name AS CompanyName,\n                            co.ApiId AS ApiId,\n                            st.Name AS Status,\n                            emp.Id AS RepId,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END AS RepName,\n                            MAX(csh.StatusDate) AS StatusDate,\n                            st.[Sequence] AS [Sequence]\n                        FROM\n                            ContactStatusHistory csh\n                            JOIN Companies co ON csh.CompanyId = co.Id\n                            JOIN Statuses st ON csh.StatusId = st.Id\n                            JOIN CollectiveContacts cc ON co.CampaignContactId = cc.Id\n                            LEFT JOIN Employees emp ON cc.RepId = emp.Id\n                        WHERE\n                            ISNULL(csh.CompanyId, '') &lt;&gt; ''\n                            AND ISNULL(co.ApiId, '') &lt;&gt; ''\n                            AND st.Name NOT IN ('Waiting on Documents')\n                            AND ISNULL(co.ApiId, '') NOT IN (SELECT \n                                                                ISNULL(co.ApiId, '')\n                                                            FROM Companies co\n                                                            JOIN Statuses st ON st.Id = co.StatusId\n                                                            WHERE st.Name IN ('Did Not Qualify',\n                                                                                'No longer interested',\n                                                                                'Non Responsive'))\n                        GROUP BY\n                            ISNULL(co.Id, 0),\n                            co.Name,\n                            co.ApiId,\n                            st.Name,\n                            emp.Id,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END,\n                            st.[Sequence]\n                        UNION\n                        SELECT DISTINCT\n                            ISNULL(co.Id, 0) AS Id,\n                            co.Name AS CompanyName,\n                            co.ApiId AS ApiId,\n                            'Waiting on Documents' AS Status,\n                            emp.Id AS RepId,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END AS RepName,\n                            IIF(co.StatusDate IS NOT NULL AND co.StatusId = 22, co.StatusDate, \n                                IIF(MIN(co.CreatedDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ) &gt; MIN(co.StatusDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ), DATEADD(MINUTE, -5, MIN(co.StatusDate) OVER( \n                                    PARTITION BY co.ApiId\n                                )), MIN(co.CreatedDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ))) AS StatusDate,\n                            1 AS Sequence\n                        FROM\n                            Companies co\n                            JOIN Statuses st on st.Id = co.StatusId\n                            LEFT JOIN ContactStatusHistory csh ON csh.CompanyId = co.Id\n                            LEFT JOIN CollectiveContacts cc ON co.CampaignContactId = cc.Id\n                            LEFT JOIN Employees emp ON cc.RepId = emp.Id\n                        WHERE\n                            ISNULL(co.ApiId, '') &lt;&gt; ''\n                            AND st.Id NOT IN (38, 39, 41)\n                    ) A\n                ) B\n            ) C\n        ) D\n    LEFT JOIN (\n        SELECT DISTINCT\n            cc.*,\n            esi.ExternalId,\n            con.Phone,\n            co.ApiId\n        FROM\n            CallCenterTable cc\n            JOIN Employees e ON e.id = cc.Agent\n            LEFT JOIN CollectiveContacts con ON con.NSCustomerId = cc.CustomerId\n            LEFT JOIN ExternalSystemIdentities esi ON esi.CampaignContactId = con.Id\n            LEFT JOIN Companies co on co.CampaignContactId = con.Id\n            LEFT JOIN CallCenterTable cont on cont.CustomerId = con.NSCustomerId\n            LEFT JOIN Employees emp on emp.Id = cont.Agent\n        WHERE\n            cc.CallDirection &lt;&gt; 'Inbound'\n            AND co.ApiId IS NOT NULL\n    ) calls ON calls.ApiId = D.ApiId\n    LEFT JOIN (\n        SELECT DISTINCT\n            nsc.*,\n            e.FirstName + ' ' + e.LastName AgentName,\n            nso.ApiId\n        FROM\n            nsCustomers nsc\n            LEFT JOIN Employees e ON e.Id = nsc.OutreachAgent\n            LEFT JOIN Opps nso on nso.CustomerId = nsc.Id\n        WHERE \n            e.Id &lt;&gt; 0\n            AND nso.ApiId IS NOT NULL\n    ) Outreach ON Outreach.ApiId = D.ApiId\nWHERE\n    C.[Status] &lt;&gt; 'Qualification Approval'\n\n\n\n\n\nExperienced in NetSuite Administration with 2 years of experience.\nSkilled in managing NetSuite accounts, customizing workflows, and providing user support.\n\n\n\n\n\nStrong verbal and written communication skills, demonstrated through effective collaboration with teams and stakeholders.\nProficient in conveying complex technical concepts in a clear and understandable manner.\n\n\n\n\n\nProven ability to proactively identify and solve problems, contributing to efficient project execution and successful outcomes.\n\n\n\n\n\nFluent in conversational Japanese, enabling effective communication in professional and social settings."
  },
  {
    "objectID": "Skills.html#power-bi-developer",
    "href": "Skills.html#power-bi-developer",
    "title": "Portfolio",
    "section": "",
    "text": "Proficient in Power BI development with 2 years of experience.\nSkilled in creating interactive dashboards, reports, and data visualizations to facilitate data-driven decision-making. :::{.image-row}    :::"
  },
  {
    "objectID": "Skills.html#python",
    "href": "Skills.html#python",
    "title": "Portfolio",
    "section": "",
    "text": "Experienced Python programmer with 2 years of hands-on experience.\nCapable of creating ETL pipelines, automating tasks, and performing data analysis using Python."
  },
  {
    "objectID": "Skills.html#r",
    "href": "Skills.html#r",
    "title": "Portfolio",
    "section": "",
    "text": "Proficient in R programming language with 4 years of experience.\nSkilled in data transformation, visualization, modeling and documentation using R."
  },
  {
    "objectID": "Skills.html#sql",
    "href": "Skills.html#sql",
    "title": "Portfolio",
    "section": "",
    "text": "Experienced in SQL with 3 years of practical experience.\nCompetent in writing complex queries, database management, and data manipulation using SQL.\n\nHere is an anonymized sample of a query I wrote to aid operations in complying with their SLA standards via a Power BI report I developed:\nSELECT DISTINCT\n    C.Id AS Id,\n    C.CompanyName AS CompanyName,\n    C.ApiId AS ApiId,\n    C.RepId AS RepId,\n    C.RepName AS RepName,\n    C.Status AS Status,\n    C.Sequence AS Sequence,\n    C.StatusDate AS StatusDate,\n    C.StatusChangeDate AS StatusChangeDate,\n    C.StatusNotes AS StatusNotes,\n    C.Is_Latest_Status AS Is_Latest_Status,\n    C.StatusChangeDate AS StatusChangeDate,\n    C.WithinOneDay AS WithinOneDay,\n    C.SameDayTime AS SameDayTime,\n    C.FirstDayTimeIfNotSameDay AS FirstDayTimeIfNotSameDay,\n    C.LastDayTimeIfNotSameDay AS LastDayTimeIfNotSameDay,\n    C.Betweenhours AS Betweenhours,\n    C.current_datetime AS current_datetime,\n    C.WorkingHours AS WorkingHours,\n    C.SLA_Achieved AS SLA_Achieved,\n    SUM(Is_Within_Date) OVER(\n        PARTITION BY C.ApiId, C.Status\n    ) AS CallCount,\n    Datediff(HOUR, C.StatusDate, C.StatusChangeDate) AS Hours_since_status,\n    CASE\n        WHEN NSO.SlaCadence = 2 THEN 'No'\n        WHEN NSO.SlaCadence = 1 THEN 'Yes'\n        ELSE 'N/A'\n    END AS SLA_Cadence,\n    CASE\n        WHEN NSO.ERCStatus = 1 THEN 'Waiting on Documents'\n        WHEN NSO.ERCStatus = 2 THEN 'Documents Received'\n        WHEN NSO.ERCStatus = 3 THEN 'WOD - Tier 1'\n        WHEN NSO.ERCStatus = 4 THEN 'Full Documents Received'\n        WHEN NSO.ERCStatus = 5 THEN 'Calculating - Tier 1'\n        WHEN NSO.ERCStatus = 6 THEN 'Calculating - Tier 2'\n        WHEN NSO.ERCStatus = 7 THEN 'WOD - Tier 2'\n        WHEN NSO.ERCStatus = 8 THEN 'Ready for Review - Tier 2'\n        WHEN NSO.ERCStatus = 9 THEN 'Ready for Review - Tier 3'\n        WHEN NSO.ERCStatus = 10 THEN 'Gov. Orders Check'\n        WHEN NSO.ERCStatus = 11 THEN 'Ready for Signature'\n        WHEN NSO.ERCStatus = 12 THEN 'Out for Signature'\n        WHEN NSO.ERCStatus = 13 THEN 'Signed'\n        WHEN NSO.ERCStatus = 14 THEN 'Filed'\n        WHEN NSO.ERCStatus = 15 THEN 'Paid - Upfront'\n        WHEN NSO.ERCStatus = 16 THEN 'Paid - Backend'\n        WHEN NSO.ERCStatus = 17 THEN 'Did Not Qualify'\n        WHEN NSO.ERCStatus = 18 THEN 'No Longer Interested'\n        WHEN NSO.ERCStatus = 19 THEN 'Non Responsive'\n        WHEN NSO.ERCStatus = 20 THEN 'Acct Ref - Don''t contact directly'\n        WHEN NSO.ERCStatus = 21 THEN 'Final Attempt Review'\n        ELSE 'N/A'\n    END AS ERCStatus,\n    CASE\n        WHEN NSO.ERCSubStatus = 1 THEN 'Call 1'\n        WHEN NSO.ERCSubStatus = 2 THEN 'Call 2'\n        WHEN NSO.ERCSubStatus = 3 THEN 'Call 3'\n        WHEN NSO.ERCSubStatus = 4 THEN 'Call 4'\n        WHEN NSO.ERCSubStatus = 5 THEN 'Call 5'\n        WHEN NSO.ERCSubStatus = 6 THEN 'Call 6'\n        WHEN NSO.ERCSubStatus = 7 THEN 'Call 7'\n        WHEN NSO.ERCSubStatus = 8 THEN 'Call Non-Responsive'\n        WHEN NSO.ERCSubStatus = 9 THEN 'Scheduled'\n        WHEN NSO.ERCSubStatus = 10 THEN 'Follow up Call 1'\n        WHEN NSO.ERCSubStatus = 11 THEN 'Follow up Call 2'\n        WHEN NSO.ERCSubStatus = 12 THEN 'Follow up Call 3'\n        WHEN NSO.ERCSubStatus = 13 THEN 'Follow up Call 4'\n        WHEN NSO.ERCSubStatus = 14 THEN 'Follow up Non-Responsive'\n        WHEN NSO.ERCSubStatus = 15 THEN 'Blank'\n        ELSE 'N/A'\n    END AS ERCSubStatus,\n    C.AgentName AS Outreach_Agent\nFROM\n    (SELECT\n        E.*,\n        IIF(E.StatusDate = MAX(E.StatusDate) OVER(\n            PARTITION BY E.ApiId\n        ), 1, 0) AS Is_Latest_Status,\n        IIF(E.Status = 'WOD - Tier 1' AND E.WorkingHours &lt;= 72, 1,\n            IIF(E.Status = 'Documents Received' AND E.WorkingHours &lt;= 2, 1,\n                IIF(E.Status = 'Full Documents Received' AND E.WorkingHours &lt;= 2, 1,\n                    IIF(E.Status = 'Calculating - Tier 1' AND E.WorkingHours &lt;= 24, 1,\n                        IIF(E.Status = 'Calculating - Tier 2' AND E.WorkingHours &lt;= 6, 1,\n                            IIF(E.Status = 'Gov. Orders Check' AND E.WorkingHours &lt;= 72, 1,\n                                IIF(E.Status = 'Ready for Review - Tier 2' AND E.WorkingHours &lt;= 5, 1,\n                                    IIF(E.Status = 'Ready for Review - Tier 3' AND E.WorkingHours &lt;= 5, 1,\n                                        IIF(E.Status = 'Ready For Signature' AND E.WorkingHours &lt;= 5, 1,\n                                            IIF(E.Status LIKE '%Attempt%' AND E.WorkingHours &lt;= 24, 1, 0)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        ) AS SLA_Achieved,\n        IIF(calls.CreatedDate &gt;= E.StatusDate AND calls.CreatedDate &lt;= E.StatusChangeDate, 1, 0) AS Is_Within_Date,\n        Outreach.AgentName AS Outreach_Agent\n    FROM\n        (SELECT\n            D.*,\n            IIF(D.WithinOneDay = 1, D.SameDayTime, (D.FirstDayTimeIfNotSameDay + D.Betweenhours + D.LastDayTimeIfNotSameDay)) AS WorkingHours\n        FROM\n            (SELECT\n                C.*,\n                IIF((DATENAME(WEEKDAY, C.StatusDate) = 'Saturday' AND DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate) &lt; 2), 1,\n                    IIF(CAST(C.StatusDate AS DATE) &lt;&gt; CAST(C.StatusChangeDate AS DATE), 0, 1)) AS WithinOneDay,\n                IIF(DATENAME(WEEKDAY, C.StatusDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &gt; 17, 0,\n                        IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &lt; 8,\n                            IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, StatusChangeDate) / 60.00) - 8 &lt; 0, 0,\n                                (CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, StatusChangeDate) / 60.00) - 8),\n                            (((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) -\n                                (CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, StatusDate) / 60.00)))))\n                ) AS SameDayTime,\n                IIF(DATENAME(WEEKDAY, C.StatusDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &gt; 17, 0,\n                        IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &lt; 8, (17 - 8),\n                            (((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) - 8 - 9) * (-1)))))\n                ) AS FirstDayTimeIfNotSameDay,\n                IIF(DATENAME(WEEKDAY, C.StatusChangeDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) &gt; 17, (17 - 8),\n                        IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) &lt; 8, 0,\n                            (((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) - 8))))) AS LastDayTimeIfNotSameDay,\n                IIF((DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9 &gt; 0,\n                    (DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9 - 9,\n                    (DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9) AS Betweenhours,\n                CONVERT(datetime, SWITCHOFFSET(GETDATE(), DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))) AS current_datetime\n            FROM\n                (SELECT DISTINCT\n                    'https://app.tax.com/#/client/' + cast(B.Id as varchar) AS Id,\n                    B.CompanyName AS CompanyName,\n                    B.ApiId AS ApiId,\n                    B.RepId AS RepId,\n                    B.RepName AS RepName,\n                    B.Status AS Status,\n                    B.[Sequence] AS Sequence,\n                    CONVERT(datetime, SWITCHOFFSET(B.StatusDate, DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))) AS StatusDate,\n                    IIF(LEAD(B.StatusDate) OVER(\n                        PARTITION BY B.ApiId\n                        ORDER BY B.StatusDate\n                    ) IS NULL, CONVERT(datetime, SWITCHOFFSET(GETDATE(), DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))),  LEAD(B.StatusDate) OVER(\n                        PARTITION BY B.ApiId\n                        ORDER BY B.StatusDate\n                    )) AS StatusChangeDate\n                FROM\n                    (SELECT\n                        A.*\n                    FROM\n                        (SELECT\n                            ISNULL(co.Id, 0) AS Id,\n                            co.Name AS CompanyName,\n                            co.ApiId AS ApiId,\n                            st.Name AS Status,\n                            emp.Id AS RepId,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END AS RepName,\n                            MAX(csh.StatusDate) AS StatusDate,\n                            st.[Sequence] AS [Sequence]\n                        FROM\n                            ContactStatusHistory csh\n                            JOIN Companies co ON csh.CompanyId = co.Id\n                            JOIN Statuses st ON csh.StatusId = st.Id\n                            JOIN CollectiveContacts cc ON co.CampaignContactId = cc.Id\n                            LEFT JOIN Employees emp ON cc.RepId = emp.Id\n                        WHERE\n                            ISNULL(csh.CompanyId, '') &lt;&gt; ''\n                            AND ISNULL(co.ApiId, '') &lt;&gt; ''\n                            AND st.Name NOT IN ('Waiting on Documents')\n                            AND ISNULL(co.ApiId, '') NOT IN (SELECT \n                                                                ISNULL(co.ApiId, '')\n                                                            FROM Companies co\n                                                            JOIN Statuses st ON st.Id = co.StatusId\n                                                            WHERE st.Name IN ('Did Not Qualify',\n                                                                                'No longer interested',\n                                                                                'Non Responsive'))\n                        GROUP BY\n                            ISNULL(co.Id, 0),\n                            co.Name,\n                            co.ApiId,\n                            st.Name,\n                            emp.Id,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END,\n                            st.[Sequence]\n                        UNION\n                        SELECT DISTINCT\n                            ISNULL(co.Id, 0) AS Id,\n                            co.Name AS CompanyName,\n                            co.ApiId AS ApiId,\n                            'Waiting on Documents' AS Status,\n                            emp.Id AS RepId,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END AS RepName,\n                            IIF(co.StatusDate IS NOT NULL AND co.StatusId = 22, co.StatusDate, \n                                IIF(MIN(co.CreatedDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ) &gt; MIN(co.StatusDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ), DATEADD(MINUTE, -5, MIN(co.StatusDate) OVER( \n                                    PARTITION BY co.ApiId\n                                )), MIN(co.CreatedDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ))) AS StatusDate,\n                            1 AS Sequence\n                        FROM\n                            Companies co\n                            JOIN Statuses st on st.Id = co.StatusId\n                            LEFT JOIN ContactStatusHistory csh ON csh.CompanyId = co.Id\n                            LEFT JOIN CollectiveContacts cc ON co.CampaignContactId = cc.Id\n                            LEFT JOIN Employees emp ON cc.RepId = emp.Id\n                        WHERE\n                            ISNULL(co.ApiId, '') &lt;&gt; ''\n                            AND st.Id NOT IN (38, 39, 41)\n                    ) A\n                ) B\n            ) C\n        ) D\n    LEFT JOIN (\n        SELECT DISTINCT\n            cc.*,\n            esi.ExternalId,\n            con.Phone,\n            co.ApiId\n        FROM\n            CallCenterTable cc\n            JOIN Employees e ON e.id = cc.Agent\n            LEFT JOIN CollectiveContacts con ON con.NSCustomerId = cc.CustomerId\n            LEFT JOIN ExternalSystemIdentities esi ON esi.CampaignContactId = con.Id\n            LEFT JOIN Companies co on co.CampaignContactId = con.Id\n            LEFT JOIN CallCenterTable cont on cont.CustomerId = con.NSCustomerId\n            LEFT JOIN Employees emp on emp.Id = cont.Agent\n        WHERE\n            cc.CallDirection &lt;&gt; 'Inbound'\n            AND co.ApiId IS NOT NULL\n    ) calls ON calls.ApiId = D.ApiId\n    LEFT JOIN (\n        SELECT DISTINCT\n            nsc.*,\n            e.FirstName + ' ' + e.LastName AgentName,\n            nso.ApiId\n        FROM\n            nsCustomers nsc\n            LEFT JOIN Employees e ON e.Id = nsc.OutreachAgent\n            LEFT JOIN Opps nso on nso.CustomerId = nsc.Id\n        WHERE \n            e.Id &lt;&gt; 0\n            AND nso.ApiId IS NOT NULL\n    ) Outreach ON Outreach.ApiId = D.ApiId\nWHERE\n    C.[Status] &lt;&gt; 'Qualification Approval'"
  },
  {
    "objectID": "Skills.html#netsuite-administration",
    "href": "Skills.html#netsuite-administration",
    "title": "Portfolio",
    "section": "",
    "text": "Experienced in NetSuite Administration with 2 years of experience.\nSkilled in managing NetSuite accounts, customizing workflows, and providing user support."
  },
  {
    "objectID": "Skills.html#conversational-japanese",
    "href": "Skills.html#conversational-japanese",
    "title": "Portfolio",
    "section": "",
    "text": "Fluent in conversational Japanese, enabling effective communication in professional and social settings."
  },
  {
    "objectID": "Skills.html#excellent-communication",
    "href": "Skills.html#excellent-communication",
    "title": "Portfolio",
    "section": "",
    "text": "Strong verbal and written communication skills, demonstrated through effective collaboration with teams and stakeholders.\nProficient in conveying complex technical concepts in a clear and understandable manner."
  },
  {
    "objectID": "Skills.html#proactive-problem-solver",
    "href": "Skills.html#proactive-problem-solver",
    "title": "Portfolio",
    "section": "",
    "text": "Proven ability to proactively identify and solve problems, contributing to efficient project execution and successful outcomes."
  }
]