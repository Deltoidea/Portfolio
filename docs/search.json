[
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Cody Iordachescu",
    "section": "About Me",
    "text": "About Me\nHi there! I’m Cody Iordachescu, a data enthusiast with a passion for leveraging insights to drive positive change. With a background in biology and bioinformatics, I bring a unique perspective to the world of data analysis. I’m fascinated by the intersection of science, technology, and creativity, and I thrive on solving complex problems and turning data into actionable insights."
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Cody Iordachescu",
    "section": "Skills & Expertise",
    "text": "Skills & Expertise\n\nData Analysis: Experienced in Python, R, and SQL, with an ablility to relay meaningful patterns and trends in data.\nBusiness Intelligence: Skilled in developing interactive dashboards and reports using tools like Power BI, empowering decision-makers with real-time insights.\nNetSuite Administration: Proficient in designing and implementing role-specific dashboards and reports in NetSuite, streamlining workflow processes.\nCommunication: Excellent communicator with experience distilling complex technical requirements into clear, actionable next steps.\nContinuous Learning: Committed to staying up-to-date with the latest developments in data science and technology, always eager to expand my skill set."
  },
  {
    "objectID": "index.html#interests",
    "href": "index.html#interests",
    "title": "Cody Iordachescu",
    "section": "Interests & Hobbies",
    "text": "Interests & Hobbies\n\n\n\n\n\n\nOutside of the data world, you’ll often find me exploring the great outdoors, whether it’s hiking through scenic trails or setting up terrariums or aquariums to bring a little piece of nature indoors. I’m also a fitness enthusiast, passionate about staying active and maintaining a healthy lifestyle. When I’m not analyzing data or hitting the gym, I enjoy experimenting with new recipes in the kitchen and immersing myself in Japanese culture through language and cuisine."
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "Cody Iordachescu",
    "section": "Get in Touch",
    "text": "Get in Touch\n\nFeel free to reach out to me via my links above. I’m always open to new opportunities, collaborations, or just a friendly chat!"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "C. Iordachescu",
    "section": "",
    "text": "title: “myblog”\n\n\nlisting:\n\n\ncontents: _posts\n\n\nsort: “date desc”\n\n\ntype: default\n\n\ncategories: true\n\n\n\ntitle: “Portfolio” toc: False resources: resume.pdf image: Media/Skills/heirarchy.png about: template: trestles image-width: 15em image-shape: round links: - text: Email icon: envelope href: mailto:codyiorda@gmail.com - text: GitHub icon: github href: https://github.com/Deltoidea/ - text: Resume icon: file-text href: Portfolio/resume.pdf id: isopod quarto: styles: - styles.css"
  },
  {
    "objectID": "posts/Space Junk.html",
    "href": "posts/Space Junk.html",
    "title": "Space Junk",
    "section": "",
    "text": "Intro\nThis is technically my first post as I started this EDA project a little while ago. The R community has an ongoing community event called tidy tuesday where a dataset is published to the tidytuesday github repo and are analyzed in just about a million different ways by as many community members. I like to go into these challenges blind and then compare what steps I’ve taken with other community members.\nThis weeks data was a 5 column dataset containing information about objects launched into space along with what entity is responsible and what year it was launched. Below is a sample of the data.\n\nlibrary(tidyverse)\nlibrary(tidytuesdayR)\nlibrary(gt)\nlibrary(htmltools)\nset.seed(123)\n#Load the data\n# tuesdata &lt;- tidytuesdayR::tt_load('2024-04-23')\n# \n# outer_space_objects &lt;- tuesdata$outer_space_objects\n#write_csv(outer_space_objects,file = \"outer_space_objects.csv\")\nouter_space_objects &lt;- read_csv(\"Data/SpaceJunk/outer_space_objects.csv\")\n\nouter_space_objects |&gt; \n  slice_sample(n = 10) |&gt; \n  gt()\n\n\n\n\n\n\n\n\n...1\nEntity\nCode\nYear\nnum_objects\n\n\n\n\n415\nIndia\nIND\n1983\n2\n\n\n463\nIndonesia\nIDN\n2015\n1\n\n\n179\nChina\nCHN\n2005\n7\n\n\n526\nIsrael\nISR\n1998\n1\n\n\n195\nChina\nCHN\n2021\n110\n\n\n938\nThailand\nTHA\n2005\n1\n\n\n1142\nWorld\nOWID_WRL\n1991\n135\n\n\n1038\nUnited States\nUSA\n1969\n62\n\n\n665\nLuxembourg\nLUX\n2018\n9\n\n\n602\nJapan\nJPN\n1997\n7\n\n\n\n\n\n\n\n\n\n\nExploration\nhere is a bit of exploration of the data:\n\nscrollable_table &lt;- outer_space_objects |&gt; \n  group_by(Entity) |&gt; \n  summarize(total_years = n_distinct(Year),n = sum(num_objects)) |&gt; \n  arrange(-total_years) |&gt; \n  gt() |&gt; \n  as_raw_html()  |&gt; \n  div(style = \"overflow-x: auto; overflow-y: auto; max-height: 200px; width: 100%;\") |&gt; \n  as.character()\n\n# Print the scrollable table\nHTML(scrollable_table)\n\n\n\n  \n  \n\n\n\nEntity\ntotal_years\nn\n\n\n\n\nRussia\n67\n3723\n\n\nWorld\n67\n17263\n\n\nUnited States\n66\n9632\n\n\nJapan\n53\n325\n\n\nChina\n48\n1051\n\n\nFrance\n41\n151\n\n\nGermany\n41\n120\n\n\nCanada\n39\n102\n\n\nEuropean Space Agency\n39\n104\n\n\nIndia\n39\n144\n\n\nUnited Kingdom\n38\n765\n\n\nIntelsat\n34\n60\n\n\nItaly\n32\n74\n\n\nLuxembourg\n26\n86\n\n\nBrazil\n25\n46\n\n\nAustralia\n22\n47\n\n\nIsrael\n22\n45\n\n\nSpain\n22\n53\n\n\nEutelsat\n21\n33\n\n\nIndonesia\n20\n23\n\n\nSouth Korea\n18\n62\n\n\nArgentina\n16\n22\n\n\nTurkey\n16\n22\n\n\nMexico\n14\n18\n\n\nSweden\n14\n20\n\n\nThailand\n14\n15\n\n\nUnited Arab Emirates\n14\n22\n\n\nNorway\n13\n20\n\n\nArabsat\n11\n15\n\n\nEUMETSAT\n11\n13\n\n\nDenmark\n10\n14\n\n\nCzechia\n9\n11\n\n\nInmarsat\n9\n14\n\n\nEgypt\n8\n12\n\n\nIran\n8\n9\n\n\nMalaysia\n8\n11\n\n\nNetherlands\n8\n16\n\n\nPoland\n8\n15\n\n\nSingapore\n8\n24\n\n\nTaiwan\n8\n21\n\n\nUkraine\n8\n10\n\n\nUruguay\n8\n40\n\n\nFinland\n7\n28\n\n\nSaudi Arabia\n7\n17\n\n\nSouth Africa\n7\n9\n\n\nSwitzerland\n7\n19\n\n\nBelgium\n6\n39\n\n\nEuropean Union\n6\n24\n\n\nLithuania\n6\n12\n\n\nChile\n5\n7\n\n\nKazakhstan\n5\n9\n\n\nNATO\n5\n5\n\n\nNew Zealand\n5\n26\n\n\nPakistan\n5\n6\n\n\nPhilippines\n5\n9\n\n\nAlgeria\n4\n6\n\n\nBelarus\n4\n4\n\n\nBulgaria\n4\n4\n\n\nGreece\n4\n5\n\n\nVietnam\n4\n6\n\n\nAzerbaijan\n3\n3\n\n\nColombia\n3\n3\n\n\nEstonia\n3\n3\n\n\nHungary\n3\n5\n\n\nMorocco\n3\n3\n\n\nNigeria\n3\n4\n\n\nNorth Korea\n3\n3\n\n\nPeru\n3\n4\n\n\nVenezuela\n3\n4\n\n\nAngola\n2\n2\n\n\nAustria\n2\n3\n\n\nBangladesh\n2\n2\n\n\nPapua New Guinea\n2\n2\n\n\nRASCOM\n2\n2\n\n\nRwanda\n2\n4\n\n\nSlovakia\n2\n2\n\n\nSlovenia\n2\n3\n\n\nAPSCO\n1\n1\n\n\nArmenia\n1\n1\n\n\nBhutan\n1\n1\n\n\nBolivia\n1\n1\n\n\nCosta Rica\n1\n1\n\n\nDjibouti\n1\n1\n\n\nEcuador\n1\n2\n\n\nEthiopia\n1\n1\n\n\nGhana\n1\n1\n\n\nGuatemala\n1\n1\n\n\nIntersputnik\n1\n1\n\n\nIreland\n1\n1\n\n\nJordan\n1\n1\n\n\nKenya\n1\n1\n\n\nKuwait\n1\n1\n\n\nLaos\n1\n1\n\n\nLatvia\n1\n1\n\n\nMauritius\n1\n1\n\n\nMoldova\n1\n1\n\n\nMonaco\n1\n1\n\n\nMongolia\n1\n1\n\n\nNepal\n1\n1\n\n\nParaguay\n1\n1\n\n\nPortugal\n1\n1\n\n\nQatar\n1\n1\n\n\nRomania\n1\n1\n\n\nSea Launch\n1\n1\n\n\nSri Lanka\n1\n1\n\n\nStarsem\n1\n2\n\n\nTunisia\n1\n1\n\n\nTurkmenistan\n1\n1\n\n\nUganda\n1\n1\n\n\nZimbabwe\n1\n1\n\n\n\n\n\n\n\n\nLooking at the output, there are 110 distinct entities, some of which have a very low number of entries. Something I’d like to see is a rank chart of the top 5 by number of space objects over time. Below I’ll create that plot:\n\n\nPlot Creation\n\n# make a top 5\ntop5 &lt;- outer_space_objects |&gt; \n  filter(!Entity  %in% c('World', 'European Space Agency')) |&gt; \n  group_by(Entity) |&gt; \n  summarise(total = sum(num_objects)) |&gt; \n  arrange(-total) |&gt; \n  pull(Entity) |&gt; head(5)\n\nfinalorder &lt;- outer_space_objects |&gt; \n  filter(!Entity  %in% c('World', 'European Space Agency'),\n         Entity %in% top5,\n         Year == max(Year)) |&gt; \n  arrange(-num_objects) |&gt; \n  pull(Entity) |&gt; \n  factor()\n\n\n\n\nRank Plot"
  },
  {
    "objectID": "Skills.html#power-bi-developer",
    "href": "Skills.html#power-bi-developer",
    "title": "Portfolio",
    "section": "Power BI Developer",
    "text": "Power BI Developer\n\nProficient in Power BI development with 2 years of experience.\nSkilled in creating interactive dashboards, reports, and data visualizations to facilitate data-driven decision-making.\n\n\n\n\n\n\nRevenue Summary Dashboard\n\n\n\n\n\nKPI Trends Report\n\n\n\n\n\nSales Pipeline Landing Page"
  },
  {
    "objectID": "Skills.html#python",
    "href": "Skills.html#python",
    "title": "Portfolio",
    "section": "Python",
    "text": "Python\n\nExperienced Python programmer with 2 years of hands-on experience.\nCapable of creating ETL pipelines, automating tasks, and performing data analysis using Python."
  },
  {
    "objectID": "Skills.html#r",
    "href": "Skills.html#r",
    "title": "Portfolio",
    "section": "R",
    "text": "R\n\nProficient in R programming language with 4 years of experience.\nSkilled in data transformation, visualization, modeling and documentation using R."
  },
  {
    "objectID": "Skills.html#sql",
    "href": "Skills.html#sql",
    "title": "Portfolio",
    "section": "SQL",
    "text": "SQL\n\nExperienced in SQL with 3 years of practical experience.\nCompetent in writing complex queries, database management, and data manipulation using SQL.\n\nHere is an anonymized sample of a query I wrote to aid operations in complying with their SLA standards via a Power BI report I developed:\nSELECT DISTINCT\n    C.Id AS Id,\n    C.CompanyName AS CompanyName,\n    C.ApiId AS ApiId,\n    C.RepId AS RepId,\n    C.RepName AS RepName,\n    C.Status AS Status,\n    C.Sequence AS Sequence,\n    C.StatusDate AS StatusDate,\n    C.StatusChangeDate AS StatusChangeDate,\n    C.StatusNotes AS StatusNotes,\n    C.Is_Latest_Status AS Is_Latest_Status,\n    C.StatusChangeDate AS StatusChangeDate,\n    C.WithinOneDay AS WithinOneDay,\n    C.SameDayTime AS SameDayTime,\n    C.FirstDayTimeIfNotSameDay AS FirstDayTimeIfNotSameDay,\n    C.LastDayTimeIfNotSameDay AS LastDayTimeIfNotSameDay,\n    C.Betweenhours AS Betweenhours,\n    C.current_datetime AS current_datetime,\n    C.WorkingHours AS WorkingHours,\n    C.SLA_Achieved AS SLA_Achieved,\n    SUM(Is_Within_Date) OVER(\n        PARTITION BY C.ApiId, C.Status\n    ) AS CallCount,\n    Datediff(HOUR, C.StatusDate, C.StatusChangeDate) AS Hours_since_status,\n    CASE\n        WHEN NSO.SlaCadence = 2 THEN 'No'\n        WHEN NSO.SlaCadence = 1 THEN 'Yes'\n        ELSE 'N/A'\n    END AS SLA_Cadence,\n    CASE\n        WHEN NSO.ERCStatus = 1 THEN 'Waiting on Documents'\n        WHEN NSO.ERCStatus = 2 THEN 'Documents Received'\n        WHEN NSO.ERCStatus = 3 THEN 'WOD - Tier 1'\n        WHEN NSO.ERCStatus = 4 THEN 'Full Documents Received'\n        WHEN NSO.ERCStatus = 5 THEN 'Calculating - Tier 1'\n        WHEN NSO.ERCStatus = 6 THEN 'Calculating - Tier 2'\n        WHEN NSO.ERCStatus = 7 THEN 'WOD - Tier 2'\n        WHEN NSO.ERCStatus = 8 THEN 'Ready for Review - Tier 2'\n        WHEN NSO.ERCStatus = 9 THEN 'Ready for Review - Tier 3'\n        WHEN NSO.ERCStatus = 10 THEN 'Gov. Orders Check'\n        WHEN NSO.ERCStatus = 11 THEN 'Ready for Signature'\n        WHEN NSO.ERCStatus = 12 THEN 'Out for Signature'\n        WHEN NSO.ERCStatus = 13 THEN 'Signed'\n        WHEN NSO.ERCStatus = 14 THEN 'Filed'\n        WHEN NSO.ERCStatus = 15 THEN 'Paid - Upfront'\n        WHEN NSO.ERCStatus = 16 THEN 'Paid - Backend'\n        WHEN NSO.ERCStatus = 17 THEN 'Did Not Qualify'\n        WHEN NSO.ERCStatus = 18 THEN 'No Longer Interested'\n        WHEN NSO.ERCStatus = 19 THEN 'Non Responsive'\n        WHEN NSO.ERCStatus = 20 THEN 'Acct Ref - Don''t contact directly'\n        WHEN NSO.ERCStatus = 21 THEN 'Final Attempt Review'\n        ELSE 'N/A'\n    END AS ERCStatus,\n    CASE\n        WHEN NSO.ERCSubStatus = 1 THEN 'Call 1'\n        WHEN NSO.ERCSubStatus = 2 THEN 'Call 2'\n        WHEN NSO.ERCSubStatus = 3 THEN 'Call 3'\n        WHEN NSO.ERCSubStatus = 4 THEN 'Call 4'\n        WHEN NSO.ERCSubStatus = 5 THEN 'Call 5'\n        WHEN NSO.ERCSubStatus = 6 THEN 'Call 6'\n        WHEN NSO.ERCSubStatus = 7 THEN 'Call 7'\n        WHEN NSO.ERCSubStatus = 8 THEN 'Call Non-Responsive'\n        WHEN NSO.ERCSubStatus = 9 THEN 'Scheduled'\n        WHEN NSO.ERCSubStatus = 10 THEN 'Follow up Call 1'\n        WHEN NSO.ERCSubStatus = 11 THEN 'Follow up Call 2'\n        WHEN NSO.ERCSubStatus = 12 THEN 'Follow up Call 3'\n        WHEN NSO.ERCSubStatus = 13 THEN 'Follow up Call 4'\n        WHEN NSO.ERCSubStatus = 14 THEN 'Follow up Non-Responsive'\n        WHEN NSO.ERCSubStatus = 15 THEN 'Blank'\n        ELSE 'N/A'\n    END AS ERCSubStatus,\n    C.AgentName AS Outreach_Agent\nFROM\n    (SELECT\n        E.*,\n        IIF(E.StatusDate = MAX(E.StatusDate) OVER(\n            PARTITION BY E.ApiId\n        ), 1, 0) AS Is_Latest_Status,\n        IIF(E.Status = 'WOD - Tier 1' AND E.WorkingHours &lt;= 72, 1,\n            IIF(E.Status = 'Documents Received' AND E.WorkingHours &lt;= 2, 1,\n                IIF(E.Status = 'Full Documents Received' AND E.WorkingHours &lt;= 2, 1,\n                    IIF(E.Status = 'Calculating - Tier 1' AND E.WorkingHours &lt;= 24, 1,\n                        IIF(E.Status = 'Calculating - Tier 2' AND E.WorkingHours &lt;= 6, 1,\n                            IIF(E.Status = 'Gov. Orders Check' AND E.WorkingHours &lt;= 72, 1,\n                                IIF(E.Status = 'Ready for Review - Tier 2' AND E.WorkingHours &lt;= 5, 1,\n                                    IIF(E.Status = 'Ready for Review - Tier 3' AND E.WorkingHours &lt;= 5, 1,\n                                        IIF(E.Status = 'Ready For Signature' AND E.WorkingHours &lt;= 5, 1,\n                                            IIF(E.Status LIKE '%Attempt%' AND E.WorkingHours &lt;= 24, 1, 0)\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        ) AS SLA_Achieved,\n        IIF(calls.CreatedDate &gt;= E.StatusDate AND calls.CreatedDate &lt;= E.StatusChangeDate, 1, 0) AS Is_Within_Date,\n        Outreach.AgentName AS Outreach_Agent\n    FROM\n        (SELECT\n            D.*,\n            IIF(D.WithinOneDay = 1, D.SameDayTime, (D.FirstDayTimeIfNotSameDay + D.Betweenhours + D.LastDayTimeIfNotSameDay)) AS WorkingHours\n        FROM\n            (SELECT\n                C.*,\n                IIF((DATENAME(WEEKDAY, C.StatusDate) = 'Saturday' AND DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate) &lt; 2), 1,\n                    IIF(CAST(C.StatusDate AS DATE) &lt;&gt; CAST(C.StatusChangeDate AS DATE), 0, 1)) AS WithinOneDay,\n                IIF(DATENAME(WEEKDAY, C.StatusDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &gt; 17, 0,\n                        IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &lt; 8,\n                            IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, StatusChangeDate) / 60.00) - 8 &lt; 0, 0,\n                                (CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, StatusChangeDate) / 60.00) - 8),\n                            (((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) -\n                                (CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, StatusDate) / 60.00)))))\n                ) AS SameDayTime,\n                IIF(DATENAME(WEEKDAY, C.StatusDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &gt; 17, 0,\n                        IIF((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) &lt; 8, (17 - 8),\n                            (((CAST(DATEPART(HOUR, C.StatusDate) AS FLOAT) + DATEPART(MINUTE, C.StatusDate) / 60.00) - 8 - 9) * (-1)))))\n                ) AS FirstDayTimeIfNotSameDay,\n                IIF(DATENAME(WEEKDAY, C.StatusChangeDate) IN ('Saturday', 'Sunday'), 0,\n                    IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) &gt; 17, (17 - 8),\n                        IIF((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) &lt; 8, 0,\n                            (((CAST(DATEPART(HOUR, C.StatusChangeDate) AS FLOAT) + DATEPART(MINUTE, C.StatusChangeDate) / 60.00) - 8))))) AS LastDayTimeIfNotSameDay,\n                IIF((DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9 &gt; 0,\n                    (DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9 - 9,\n                    (DATEDIFF(DAY, C.StatusDate, C.StatusChangeDate)\n                        - DATEDIFF(WW, C.StatusDate, C.StatusChangeDate) * 2\n                        - (CASE WHEN DATENAME(DW, C.StatusDate) = 'Sunday' THEN 1 ELSE 0 END)\n                        - (CASE WHEN DATENAME(DW, C.StatusChangeDate) = 'Saturday' THEN 1 ELSE 0 END)) * 9) AS Betweenhours,\n                CONVERT(datetime, SWITCHOFFSET(GETDATE(), DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))) AS current_datetime\n            FROM\n                (SELECT DISTINCT\n                    'https://app.tax.com/#/client/' + cast(B.Id as varchar) AS Id,\n                    B.CompanyName AS CompanyName,\n                    B.ApiId AS ApiId,\n                    B.RepId AS RepId,\n                    B.RepName AS RepName,\n                    B.Status AS Status,\n                    B.[Sequence] AS Sequence,\n                    CONVERT(datetime, SWITCHOFFSET(B.StatusDate, DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))) AS StatusDate,\n                    IIF(LEAD(B.StatusDate) OVER(\n                        PARTITION BY B.ApiId\n                        ORDER BY B.StatusDate\n                    ) IS NULL, CONVERT(datetime, SWITCHOFFSET(GETDATE(), DATEPART(TZOFFSET, getdate() AT TIME ZONE 'Mountain Standard Time'))),  LEAD(B.StatusDate) OVER(\n                        PARTITION BY B.ApiId\n                        ORDER BY B.StatusDate\n                    )) AS StatusChangeDate\n                FROM\n                    (SELECT\n                        A.*\n                    FROM\n                        (SELECT\n                            ISNULL(co.Id, 0) AS Id,\n                            co.Name AS CompanyName,\n                            co.ApiId AS ApiId,\n                            st.Name AS Status,\n                            emp.Id AS RepId,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END AS RepName,\n                            MAX(csh.StatusDate) AS StatusDate,\n                            st.[Sequence] AS [Sequence]\n                        FROM\n                            ContactStatusHistory csh\n                            JOIN Companies co ON csh.CompanyId = co.Id\n                            JOIN Statuses st ON csh.StatusId = st.Id\n                            JOIN CollectiveContacts cc ON co.CampaignContactId = cc.Id\n                            LEFT JOIN Employees emp ON cc.RepId = emp.Id\n                        WHERE\n                            ISNULL(csh.CompanyId, '') &lt;&gt; ''\n                            AND ISNULL(co.ApiId, '') &lt;&gt; ''\n                            AND st.Name NOT IN ('Waiting on Documents')\n                            AND ISNULL(co.ApiId, '') NOT IN (SELECT \n                                                                ISNULL(co.ApiId, '')\n                                                            FROM Companies co\n                                                            JOIN Statuses st ON st.Id = co.StatusId\n                                                            WHERE st.Name IN ('Did Not Qualify',\n                                                                                'No longer interested',\n                                                                                'Non Responsive'))\n                        GROUP BY\n                            ISNULL(co.Id, 0),\n                            co.Name,\n                            co.ApiId,\n                            st.Name,\n                            emp.Id,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END,\n                            st.[Sequence]\n                        UNION\n                        SELECT DISTINCT\n                            ISNULL(co.Id, 0) AS Id,\n                            co.Name AS CompanyName,\n                            co.ApiId AS ApiId,\n                            'Waiting on Documents' AS Status,\n                            emp.Id AS RepId,\n                            CASE\n                                WHEN cc.SourceId = 10 THEN 'LENDIO'\n                                ELSE concat(emp.FirstName, ' ', emp.LastName)\n                            END AS RepName,\n                            IIF(co.StatusDate IS NOT NULL AND co.StatusId = 22, co.StatusDate, \n                                IIF(MIN(co.CreatedDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ) &gt; MIN(co.StatusDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ), DATEADD(MINUTE, -5, MIN(co.StatusDate) OVER( \n                                    PARTITION BY co.ApiId\n                                )), MIN(co.CreatedDate) OVER( \n                                    PARTITION BY co.ApiId\n                                ))) AS StatusDate,\n                            1 AS Sequence\n                        FROM\n                            Companies co\n                            JOIN Statuses st on st.Id = co.StatusId\n                            LEFT JOIN ContactStatusHistory csh ON csh.CompanyId = co.Id\n                            LEFT JOIN CollectiveContacts cc ON co.CampaignContactId = cc.Id\n                            LEFT JOIN Employees emp ON cc.RepId = emp.Id\n                        WHERE\n                            ISNULL(co.ApiId, '') &lt;&gt; ''\n                            AND st.Id NOT IN (38, 39, 41)\n                    ) A\n                ) B\n            ) C\n        ) D\n    LEFT JOIN (\n        SELECT DISTINCT\n            cc.*,\n            esi.ExternalId,\n            con.Phone,\n            co.ApiId\n        FROM\n            CallCenterTable cc\n            JOIN Employees e ON e.id = cc.Agent\n            LEFT JOIN CollectiveContacts con ON con.NSCustomerId = cc.CustomerId\n            LEFT JOIN ExternalSystemIdentities esi ON esi.CampaignContactId = con.Id\n            LEFT JOIN Companies co on co.CampaignContactId = con.Id\n            LEFT JOIN CallCenterTable cont on cont.CustomerId = con.NSCustomerId\n            LEFT JOIN Employees emp on emp.Id = cont.Agent\n        WHERE\n            cc.CallDirection &lt;&gt; 'Inbound'\n            AND co.ApiId IS NOT NULL\n    ) calls ON calls.ApiId = D.ApiId\n    LEFT JOIN (\n        SELECT DISTINCT\n            nsc.*,\n            e.FirstName + ' ' + e.LastName AgentName,\n            nso.ApiId\n        FROM\n            nsCustomers nsc\n            LEFT JOIN Employees e ON e.Id = nsc.OutreachAgent\n            LEFT JOIN Opps nso on nso.CustomerId = nsc.Id\n        WHERE \n            e.Id &lt;&gt; 0\n            AND nso.ApiId IS NOT NULL\n    ) Outreach ON Outreach.ApiId = D.ApiId\nWHERE\n    C.[Status] &lt;&gt; 'Qualification Approval'"
  },
  {
    "objectID": "Skills.html#netsuite-administration",
    "href": "Skills.html#netsuite-administration",
    "title": "Portfolio",
    "section": "NetSuite Administration",
    "text": "NetSuite Administration\n\nExperienced in NetSuite Administration with 2 years of experience.\nSkilled in managing NetSuite accounts, customizing workflows, and providing user support."
  },
  {
    "objectID": "Skills.html#excellent-communication",
    "href": "Skills.html#excellent-communication",
    "title": "Portfolio",
    "section": "Excellent Communication",
    "text": "Excellent Communication\n\nStrong verbal and written communication skills, demonstrated through effective collaboration with teams and stakeholders.\nProficient in conveying complex technical concepts in a clear and understandable manner."
  },
  {
    "objectID": "Skills.html#proactive-problem-solver",
    "href": "Skills.html#proactive-problem-solver",
    "title": "Portfolio",
    "section": "Proactive Problem Solver",
    "text": "Proactive Problem Solver\n\nProven ability to proactively identify and solve problems, contributing to efficient project execution and successful outcomes."
  },
  {
    "objectID": "Skills.html#other-skills",
    "href": "Skills.html#other-skills",
    "title": "Portfolio",
    "section": "Other Skills:",
    "text": "Other Skills:\n\nAnalytical Skills\n\nGather, analyze, and interpret complex data from various sources to identify trends, patterns, and insights.\n\n\n\nBusiness Acumen\n\nUnderstand business processes, operations, and industry trends to provide valuable insights and recommendations.\n\n\n\nStakeholder Management\n\nEngage with stakeholders, understand their requirements, and manage expectations throughout the project lifecycle.\n\n\n\nRequirement Elicitation\n\nGather and document business requirements through interviews, workshops, and other elicitation techniques.\n\n\n\nData Analysis\n\nManipulate, clean, and analyze large datasets using tools such as SQL, R, and python software.\n\n\n\nProcess Improvement\n\nIdentify inefficiencies and streamline business processes using methodologies like kaizen.\n\n\n\nProject Management\n\nPlan, execute, and monitor project activities using project management principles and methodologies.\n\n\n\nCritical Thinking\n\nEvaluate information objectively, challenge assumptions, and make informed decisions based on evidence and analysis.\n\n\n\nCollaboration\n\nWork effectively in cross-functional teams, facilitate discussions, and drive consensus on project objectives.\n\n\n\nDocumentation\n\nDocument requirements, specifications, process flows, and other project artifacts using standard templates and tools including github.\n\n\n\nTechnical Skills\n\nUnderstand basic IT concepts and systems to communicate effectively with technical teams.\n\n\n\nAdaptability\n\nAdapt to changing priorities, project requirements, and organizational dynamics in a fast-paced environment.\n\n\n\nAttention to Detail\n\nEnsure accuracy and completeness in all aspects of analysis, documentation, and deliverables."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "Space Junk\n\n\n\n\n\n\nTidyTuesday\n\n\nDataAnalysis\n\n\n\n\n\n\n\n\n\nApr 23, 2024\n\n\nCody Iordachescu\n\n\n\n\n\n\nNo matching items"
  }
]